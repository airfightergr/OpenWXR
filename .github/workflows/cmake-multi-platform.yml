# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list. 
      matrix:
        os: [ubuntu-22.04, macos-12]
        build_type: [Debug]
        subsystem: [Linux, Windows, Darwin]
        include:
          - os: ubuntu-22.04
            subsystem : Linux
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-22.04
            subsystem : Windows
            c_compiler: x86_64-w64-mingw32-gcc
            cpp_compiler: x86_64-w64-mingw32-g++
          - os: macos-12
            subsystem : Darwin
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: ubuntu-22.04
            subsystem : Darwin
          - os: macos-12
            subsystem : Linux
          - os: macos-12
            subsystem : Windows

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Ubuntu Install OpenGL
      if: runner.os == 'Linux'
      run:   |
              sudo apt-get update
              sudo apt-get install --fix-missing libgl1-mesa-dev libglfw3-dev libglu1-mesa-dev
      shell: bash        
      
    - name: Ubuntu Install Mingw
      if: matrix.subsystem == 'Windows'
      run:   |
              sudo apt-get update
              sudo apt-get install mingw-w64
      shell: bash     

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type

      run: 
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_SYSTEM_NAME=${{ matrix.subsystem }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Build shaders
      if: matrix.subsystem == 'Windows'
      run:   |
              sudo apt-get install spirv-cross
              cd ${{github.workspace}}/data
              ./glsl_cleanup.sh
              cp -r ${{github.workspace}}/data ${{github.workspace}}/Deploy/openwxr
              cp -r ${{github.workspace}}/fonts ${{github.workspace}}/Deploy/openwxr 

      shell: bash   

    - uses: actions/upload-artifact@v3
      with:
        name: openwxr
        path: ${{github.workspace}}/Deploy
